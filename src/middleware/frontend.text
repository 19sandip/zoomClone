import React, { useRef, useState, useEffect } from "react";
import io from "socket.io-client";
import styles from "../styles/videoMeet.module.css";
import { Badge, Button, IconButton, TextField } from "@mui/material";
import{Videocam, VideocamOff, CallEnd, Mic, MicOff, ScreenShare, StopScreenShare, Chat} from '@mui/icons-material';
import server from "../environment";
const server_url = server;
const connections = {};

let peerConfigConnections = {
  iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
};

export default function VideoMeet() {
  let socketRef = useRef();
  let socketIdRef = useRef();
  let localVideoRef = useRef();

  let [videoAvailable, setVideoAvailable] = useState(true);
  let [audioAvailable, setAudioAvailable] = useState(true);
  let [video, setVideo] = useState(true);
  let [audio, setAudio] = useState(true);

  let [screen, setScreen] = useState();
  let [screenAvailable, setScreenAvailable] = useState();
  let [showModel, setShowModel] = useState();
  
  let [messages, setMessages] = useState([]);
  let [message, setMessage] = useState("");
  let [newMessages, setNewMessages] = useState(9);
  let [askForUsername, setAskForUsername] = useState(true);
  let [username, setUsername] = useState("");
  const videoRef = useRef([]);
  let [videos, setVideos] = useState([]);

  //TODO
  // if(isChrome === false){

  // }
 
  const getPermission = async () => {
    try {
      const videoPermission = await navigator.mediaDevices.getUserMedia({
        video: true,
      });
      if (videoPermission) {
        setVideoAvailable(true);
      } else {
        setVideoAvailable(false);
      }
      const audioPermission = await navigator.mediaDevices.getUserMedia({
        audio: true,
      });
      if (audioPermission) {
        setAudioAvailable(true);
      } else {
        setAudioAvailable(false);
      }

      // if (navigator.mediaDevices.getDisplayMedia()) {
      //   setScreenAvailable(true);
      // } else {
      //   setScreenAvailable(false);
      // }

      if (videoAvailable || audioAvailable) {
        const userMediaStream = await navigator.mediaDevices.getUserMedia({
          video: videoAvailable,
          audio: audioAvailable,
        });

        if (userMediaStream) {
          window.localStream = userMediaStream;
          if (localVideoRef.current) {
            localVideoRef.current.srcObject = userMediaStream;
          }
        }
      }
    } catch (err) {
      console.log(err);
    }
  };
  useEffect(() => {
    getPermission();
  },[]);

  
  const getUserMediaSuccess = (stream) => {
    try {
      if(window.localStream)
        window.localStream.getTracks().forEach(track => track.stop());
    } catch (e) {
      console.log(e);
    }

    window.localStream = stream;
    localVideoRef.current.srcObject = stream;

    for (let id in connections) {

      if (id === socketIdRef.current)  continue;
       
      connections[id].addStream(window.localStream);

      connections[id].createOffer().then((description) => {
        connections[id]
          .setLocalDescription(description)
          .then(() => {
            socketRef.current.emit(
              "signal",
              id,
              JSON.stringify({ "sdp": connections[id].localDescription })
            );
          })
          .catch((e) => console.log(e));
      });
    }
    
    stream.getTracks().forEach(
      track =>
        track.onended = () => {
          setVideo(false);
          setAudio(false);

          try {
            let tracks = localVideoRef.current.srcObject.getTracks();
            tracks.forEach((track) => track.stop());
          } catch (e) {
            console.log(e);
          }

   
  //black silence
          let blackSilence = (...args) =>
            new MediaStream([black(...args), silence()]);
          window.localStream = blackSilence();
          localVideoRef.current.srcObject = window.localStream;

          for (let id in connections) {
            connections[id].addStream(window.localStream);
            connections[id].createOffer().then((description) => {
              connections[id]
                .setLocalDescription(description)
                .then(() => {
                  socketRef.current.emit(
                    "signal",
                    id,
                    JSON.stringify({ 'sdp': connections[id].localDescription })
                  );
                })
                .catch((e) => console.log(e));
            });
          }
        }
    );
  };

  let silence = () => {
    let ctx = new AudioContext();
    let oscillator = ctx.createOscillator();
    let dst = oscillator.connect(ctx.createMediaStreamDestination());
    oscillator.start();
    ctx.resume();

    return Object.assign(dst.stream.getAudioTracks()[0], { enabled: false });
  };

  let black = ({ width = 640, height = 480 } = {}) => {
    let canvas = Object.assign(
      document.createElement("canvas", { width, height })
    );

    canvas.getContext("2D").filRect(0, 0, width, height);
    let stream = canvas.captureStream();

    return Object.assign(stream.getVideoTracks()[0], { enabled: false });
  };






  const getUserMedia = () => {
    if ((video && videoAvailable) || (audio && audioAvailable)) {
      navigator.mediaDevices
        .getUserMedia({ video: video, audio: audio })
        .then(getUserMediaSuccess)
        .catch((e) => {
          console.log(e);
        });
    } else {
      try {
        let tracks = localVideoRef.current.srcObject.getTracks();
        tracks.forEach((track) => track.stop());
      } catch (e) {
        console.log(e);
      }
    }
  };



  useEffect(() => {
    if(video&&audio){
getUserMedia();

    } 
     
  }, [video, audio]);

  
 
//todo chat messages

  const addChatMessage = (data, sender, socketIdSender) => {
    setMessages((prevMessages) => [
        ...prevMessages,
        { sender: sender, data: data }
    ]);
    if (socketIdSender !== socketIdRef.current) {
        setNewMessages((prevNewMessages) => prevNewMessages + 1);
    }
};

let gotMessagesFromServer = (fromId, message) => {
  let signal = JSON.parse(message);

  if (fromId !== socketIdRef.current) {
    if (signal.sdp) {
      const remoteDescription = new RTCSessionDescription(signal.sdp);

      // Check the SDP type and the current connection state
      if (
        signal.sdp.type === "offer" &&
        connections[fromId].signalingState === "stable"
      ) {
        connections[fromId]
          .setRemoteDescription(remoteDescription)
          .then(() => {
            connections[fromId]
              .createAnswer()
              .then((description) => {
                connections[fromId]
                  .setLocalDescription(description)
                  .then(() => {
                    socketRef.current.emit(
                      "signal",
                      fromId,
                      JSON.stringify({
                        'sdp': connections[fromId].localDescription,
                      })
                    );
                  })
                  .catch((e) => console.log(e));
              })
              .catch((e) => console.log(e));
          })
          .catch((e) => console.log(e));
      } else if (
        signal.sdp.type === "answer" &&
        connections[fromId].signalingState === "have-local-offer"
      ) {
        connections[fromId]
          .setRemoteDescription(remoteDescription)
          .catch((e) => console.log(e));
      }
    }

    if (signal.ice) {
      connections[fromId]
        .addIceCandidate(new RTCIceCandidate(signal.ice))
        .catch((e) => console.log(e));
    }
  }
};

  const connectToSocketServer =  async () => {


    socketRef.current = await io.connect(server_url, { secure: false });
    socketRef.current.on("signal",  (fromId, message)=>{
      gotMessagesFromServer(fromId, message);
    });

    socketRef.current.on("connect", () => {  
    socketRef.current.emit("join-call", window.location.href);
    socketIdRef.current = socketRef.current.id;
    socketRef.current.on("chat-message", addChatMessage);

      socketRef.current.on("user-left", (id) => {
        delete connections[id];
        setVideos(videos => videos.filter((video) => video.socketId !== id));
      });

      socketRef.current.on("user-joined", (id, clients) => {
        // if(id === socketIdRef.current) return; // skip adding the current user
        clients.forEach((socketListId) => {
          // if (socketListId === socketIdRef.current) return;// skip adding the currennt user

          if(!connections[socketListId]){
          connections[socketListId] = new RTCPeerConnection(
            peerConfigConnections
          );
          // set up ice candidate handiling
          connections[socketListId].onicecandidate = (event) => {
            if (event.candidate) {
              socketRef.current.emit(
                "signal",
                socketListId,
                JSON.stringify({ 'ice': event.candidate })
              );
            }
          }
        };

          //wait for their video stream
          connections[socketListId].ontrack = async (event) => {
            let videoExists = videoRef.current.find(
              (video) => video.socketId === socketListId
            );

            if (videoExists) {
              setVideos((videos) => {
                const updatedVideos = videos.map((video) =>
                  video.socketId === socketListId
                    ? { ...video, stream: event.streams[0] }
                    : video
                );

                videoRef.current = updatedVideos;
                return updatedVideos;
              });
            } else {
              let newVideo = {
                socketId: socketListId,
                stream: event.streams[0],
                autoPlay: true,
                playsinline: true,
              };

              setVideos((videos) => {
                const updatedVideos = [...videos, newVideo];
                videoRef.current = updatedVideos;
                return updatedVideos;
              });
            }
          };

          //add the local video stream to the connection

          if (window.localStream) {
            connections[socketListId].addStream(window.localStream);
          } else {
            // blackSilence
            let blackSilence = (...args) =>
              new MediaStream([black(...args), silence()]);
            window.localStream = blackSilence();
            connections[socketListId].addStream(window.localStream);
          }
        });

        if (id === socketIdRef.current) {
          for (let id2 in connections) {
            if (id2 === socketIdRef.current) continue;

            try {
              connections[id2].addStream(window.localStream);
            } catch (err) {
              console.log(err);
            }

            connections[id2].createOffer().then((description) => {
              connections[id2]
                .setLocalDescription(description)
                .then(() => {
                  socketRef.current.emit(
                    "signal",
                    id2,
                    JSON.stringify({ 'sdp': connections[id2].localDescription })
                  );
                })
                .catch((e) => console.log(e));
            });
          }
        }
      });
    });
  };

  useEffect(()=>{
    connectToSocketServer();
  },[])


 
  const getMedia = () => {
    setVideo(videoAvailable);
    setAudio(audioAvailable);
  };

  const connect = () => {
    setAskForUsername(false)
    getMedia();
  };


  
  const handleVideo=()=>{
    setVideo(!video);

  }

  const handelAudio = ()=>{
    setAudio(!audio);
  }

  return (
    <div >
      {askForUsername === true ? 
        <div>
          <h2>Enter to the Loby</h2>
          <TextField
            id="outlined-basic"
            label="username"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            variant="outlined"
          />
          <Button variant="contained" onClick={connect}>
            Connect
          </Button>

          <div>
            
            <video ref={localVideoRef} autoPlay muted></video>
          </div>
        </div>
       : 
        <div className={styles.videoMeetContainer}>

            <div className={styles.buttonContainer}>
                <IconButton onClick={handleVideo}>
                 {
                   video === true ? <Videocam/> : <VideocamOff/>
                }

                </IconButton>
                <IconButton>
                 {
                   <CallEnd style={{color : "red"}}/>
                }

                </IconButton>
                <IconButton onClick={handelAudio}>
                 {
                   audio === true ? <Mic/> : <MicOff/>
                }
                </IconButton>

                <IconButton>
                {
                  screenAvailable === true ? (
                    screen === true ? <ScreenShare/> :  < StopScreenShare/>
                  )  : <></>
                }
               </IconButton>

               <Badge badgeContent={newMessages} max={999} color='secondary'>
                <IconButton>
                  <Chat/>
                </IconButton>
               </Badge>
                
                 </div>

          <video className={styles.meetUserVideo} ref={localVideoRef} autoPlay muted>
          
          </video>
            <div>
            
              {videos.map((video) => (
              <video
                data-socket={video.socketId}
                ref={(ref) => {
                  if (ref && video.stream) {
                   ref.srcObject = video.stream;
                  }
                }}
                autoPlay
                muted
              ></video>

          ))}

          </div>
          
        </div>
       } 
    </div>
  );
}
